// Package ic_test provides a client for the "types" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package ic_test

import (
	"github.com/mohaijiang/agent-go"
	"github.com/mohaijiang/agent-go/candid/idl"
	"github.com/mohaijiang/agent-go/principal"
)

// Agent is a client for the "types" canister.
type TypesAgent struct {
	a          *agent.Agent
	canisterId principal.Principal
}

// NewAgent creates a new agent for the "types" canister.
func NewTypesAgent(canisterId principal.Principal, config agent.Config) (*TypesAgent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &TypesAgent{
		a:          a,
		canisterId: canisterId,
	}, nil
}

// Bool calls the "bool" method on the "types" canister.
func (a TypesAgent) Bool(arg0 bool, arg1 []bool) (*bool, *[]bool, error) {
	args, err := idl.Marshal([]any{arg0, arg1})
	if err != nil {
		return nil, nil, err
	}
	var r0 bool
	var r1 []bool
	if err := a.a.Call(
		a.canisterId,
		"bool",
		args,
		[]any{&r0, &r1},
	); err != nil {
		return nil, nil, err
	}
	return &r0, &r1, nil
}

// Float calls the "float" method on the "types" canister.
func (a TypesAgent) Float(arg0 float32, arg1 []float32, arg2 float64, arg3 []float64) (*float32, *[]float32, *float64, *[]float64, error) {
	args, err := idl.Marshal([]any{arg0, arg1, arg2, arg3})
	if err != nil {
		return nil, nil, nil, nil, err
	}
	var r0 float32
	var r1 []float32
	var r2 float64
	var r3 []float64
	if err := a.a.Call(
		a.canisterId,
		"float",
		args,
		[]any{&r0, &r1, &r2, &r3},
	); err != nil {
		return nil, nil, nil, nil, err
	}
	return &r0, &r1, &r2, &r3, nil
}

// Int calls the "int" method on the "types" canister.
func (a TypesAgent) Int(arg0 idl.Int, arg1 int8, arg2 int16, arg3 int32, arg4 int64) (*idl.Int, *int8, *int16, *int32, *int64, error) {
	args, err := idl.Marshal([]any{arg0, arg1, arg2, arg3, arg4})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	var r0 idl.Int
	var r1 int8
	var r2 int16
	var r3 int32
	var r4 int64
	if err := a.a.Call(
		a.canisterId,
		"int",
		args,
		[]any{&r0, &r1, &r2, &r3, &r4},
	); err != nil {
		return nil, nil, nil, nil, nil, err
	}
	return &r0, &r1, &r2, &r3, &r4, nil
}

// Nat calls the "nat" method on the "types" canister.
func (a TypesAgent) Nat(arg0 idl.Nat, arg1 uint8, arg2 uint16, arg3 uint32, arg4 uint64) (*idl.Nat, *uint8, *uint16, *uint32, *uint64, error) {
	args, err := idl.Marshal([]any{arg0, arg1, arg2, arg3, arg4})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	var r0 idl.Nat
	var r1 uint8
	var r2 uint16
	var r3 uint32
	var r4 uint64
	if err := a.a.Call(
		a.canisterId,
		"nat",
		args,
		[]any{&r0, &r1, &r2, &r3, &r4},
	); err != nil {
		return nil, nil, nil, nil, nil, err
	}
	return &r0, &r1, &r2, &r3, &r4, nil
}

// Principal calls the "principal" method on the "types" canister.
func (a TypesAgent) Principal(arg0 principal.Principal, arg1 []principal.Principal) (*principal.Principal, *[]principal.Principal, error) {
	args, err := idl.Marshal([]any{arg0, arg1})
	if err != nil {
		return nil, nil, err
	}
	var r0 principal.Principal
	var r1 []principal.Principal
	if err := a.a.Call(
		a.canisterId,
		"principal",
		args,
		[]any{&r0, &r1},
	); err != nil {
		return nil, nil, err
	}
	return &r0, &r1, nil
}

// Text calls the "text" method on the "types" canister.
func (a TypesAgent) Text(arg0 string, arg1 []string) (*string, *[]string, error) {
	args, err := idl.Marshal([]any{arg0, arg1})
	if err != nil {
		return nil, nil, err
	}
	var r0 string
	var r1 []string
	if err := a.a.Call(
		a.canisterId,
		"text",
		args,
		[]any{&r0, &r1},
	); err != nil {
		return nil, nil, err
	}
	return &r0, &r1, nil
}

// VecInt calls the "vec_int" method on the "types" canister.
func (a TypesAgent) VecInt(arg0 []idl.Int, arg1 []int8, arg2 []int16, arg3 []int32, arg4 []int64) (*[]idl.Int, *[]int8, *[]int16, *[]int32, *[]int64, error) {
	args, err := idl.Marshal([]any{arg0, arg1, arg2, arg3, arg4})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	var r0 []idl.Int
	var r1 []int8
	var r2 []int16
	var r3 []int32
	var r4 []int64
	if err := a.a.Call(
		a.canisterId,
		"vec_int",
		args,
		[]any{&r0, &r1, &r2, &r3, &r4},
	); err != nil {
		return nil, nil, nil, nil, nil, err
	}
	return &r0, &r1, &r2, &r3, &r4, nil
}

// VecNat calls the "vec_nat" method on the "types" canister.
func (a TypesAgent) VecNat(arg0 []idl.Nat, arg1 []uint8, arg2 []uint16, arg3 []uint32, arg4 []uint64) (*[]idl.Nat, *[]uint8, *[]uint16, *[]uint32, *[]uint64, error) {
	args, err := idl.Marshal([]any{arg0, arg1, arg2, arg3, arg4})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	var r0 []idl.Nat
	var r1 []uint8
	var r2 []uint16
	var r3 []uint32
	var r4 []uint64
	if err := a.a.Call(
		a.canisterId,
		"vec_nat",
		args,
		[]any{&r0, &r1, &r2, &r3, &r4},
	); err != nil {
		return nil, nil, nil, nil, nil, err
	}
	return &r0, &r1, &r2, &r3, &r4, nil
}
