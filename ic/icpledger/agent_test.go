// Automatically generated by https://github.com/aviate-labs/agent-go.
package icpledger_test

import (
	"github.com/mohaijiang/agent-go"

	"github.com/mohaijiang/agent-go/mock"
	"github.com/mohaijiang/agent-go/principal"
	"net/http/httptest"
	"net/url"
	"testing"

	"github.com/mohaijiang/agent-go/ic/icpledger"
)

// Test_AccountBalance tests the "account_balance" method on the "icpledger" canister.
func Test_AccountBalance(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "account_balance",
			Arguments: []any{new(icpledger.AccountBalanceArgs)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(icpledger.Tokens)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 icpledger.AccountBalanceArgs
	if _, err := a.AccountBalance(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_Archives tests the "archives" method on the "icpledger" canister.
func Test_Archives(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "archives",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(icpledger.Archives)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.Archives(); err != nil {
		t.Fatal(err)
	}

}

// Test_Decimals tests the "decimals" method on the "icpledger" canister.
func Test_Decimals(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "decimals",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(struct {
					Decimals uint32 `ic:"decimals"`
				})}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.Decimals(); err != nil {
		t.Fatal(err)
	}

}

// Test_Name tests the "name" method on the "icpledger" canister.
func Test_Name(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "name",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(struct {
					Name string `ic:"name"`
				})}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.Name(); err != nil {
		t.Fatal(err)
	}

}

// Test_QueryBlocks tests the "query_blocks" method on the "icpledger" canister.
func Test_QueryBlocks(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "query_blocks",
			Arguments: []any{new(icpledger.GetBlocksArgs)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(icpledger.QueryBlocksResponse)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 icpledger.GetBlocksArgs
	if _, err := a.QueryBlocks(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_Symbol tests the "symbol" method on the "icpledger" canister.
func Test_Symbol(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "symbol",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(struct {
					Symbol string `ic:"symbol"`
				})}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.Symbol(); err != nil {
		t.Fatal(err)
	}

}

// Test_Transfer tests the "transfer" method on the "icpledger" canister.
func Test_Transfer(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "transfer",
			Arguments: []any{new(icpledger.TransferArgs)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(icpledger.TransferResult)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 icpledger.TransferArgs
	if _, err := a.Transfer(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_TransferFee tests the "transfer_fee" method on the "icpledger" canister.
func Test_TransferFee(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "transfer_fee",
			Arguments: []any{new(icpledger.TransferFeeArg)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(icpledger.TransferFee)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 icpledger.TransferFeeArg
	if _, err := a.TransferFee(a0); err != nil {
		t.Fatal(err)
	}

}

// newAgent creates a new agent with the given (mock) methods.
// Runs a mock replica in the background.
func newAgent(methods []mock.Method) (*icpledger.Agent, error) {
	replica := mock.NewReplica()
	canisterId := principal.Principal{Raw: []byte("icpledger")}
	replica.AddCanister(canisterId, methods)
	s := httptest.NewServer(replica)
	u, _ := url.Parse(s.URL)
	a, err := icpledger.NewAgent(canisterId, agent.Config{
		ClientConfig: &agent.ClientConfig{Host: u},
		FetchRootKey: true,
	})
	if err != nil {
		return nil, err
	}
	return a, nil
}
